tumor_samples = read.csv("tumor_data.csv",header = T)
anti_gene_exps = get_anti_exp(anti_file_names)
tetras=colnames(tumor_samples)[3:length(colnames(tumor_samples))]
View(tumor_samples)
View(tumor_samples)
results = get_match_score(tetras,anti_gene_exps)
results
results = apply(M[,-(1:2)], 1, count_score)
}
count_score=function(r)
{
muts = tetras[r==1]
return(sum(get_match_score(muts,anti_gene_exps)))
}
results = apply(M[,-(1:2)], 1, count_score)
results = apply(tumor_samples[,-(1:2)], 1, count_score)
results
lb_scores = as.data.frame(results[tumor_samples[,2]==1])
nb_scores = as.data.frame(results[tumor_samples[,2]==0])
lb_scores[,2]=1
nb_scores[,2]=0
colnames(lb_scores)=c("Matches","Benefit")
colnames(nb_scores)=c("Matches","Benefit")
allscores = rbind(lb_scores,nb_scores)
model = wilcox.test(Matches~Benefit,data = allscores,exact=FALSE)
print(model$p.value)
count_score=function(r)
{
muts = tetras[r==1]
return(get_match_score(muts,anti_gene_exps))
}
results2 = apply(tumor_samples[,-(1:2)], 1, count_score)
View(results2)
View(results2)
lb_scores = as.data.frame(results2[tumor_samples[,2]==1])
nb_scores = as.data.frame(results2[tumor_samples[,2]==0])
lb_scores = as.data.frame(results2[tumor_samples[,2]==1,])
nb_scores = as.data.frame(results2[tumor_samples[,2]==0,])
lb_scores$Benefit=1
nb_scores$Benefti=0
View(allscores)
View(allscores)
View(lb_scores)
View(lb_scores)
final_dat = rbind(lb_scores,nb_scores)
nb_scores$Benefit=0
final_dat = rbind(lb_scores,nb_scores)
lb_scores = as.data.frame(results2[tumor_samples[,2]==1,])
nb_scores = as.data.frame(results2[tumor_samples[,2]==0,])
lb_scores$Benefit=1
nb_scores$Benefit=0
final_dat = rbind(lb_scores,nb_scores)
View(final_dat)
View(final_dat)
colnames(final_dat)=c(tetras,"Benefit")
colnames(final_dat)=c(anti_file_names,"Benefit")
View(final_dat)
View(final_dat)
colnames(final_dat)=c(trim(anti_file_names,"csv"),"Benefit")
?substr
colnames(final_dat)=c(substr(anti_file_names,1,length(anti_file_names-3)),"Benefit")
colnames(final_dat)=c(substr(anti_file_names,1,length(anti_file_names)-3),"Benefit")
View(final_dat)
View(final_dat)
colnames(final_dat)=c(substr(anti_file_names,1,length(anti_file_names)-3),"Benefit")
View(final_dat)
View(final_dat)
length(anti_file_names)
colnames(final_dat)=c(substr(anti_file_names,1,lengths(anti_file_names)-3),"Benefit")
View(final_dat)
View(final_dat)
lengths(anti_file_names)
antigens = c()
for (v in anti_file_names)
{
antigens = c(antigens,substr(v,1,length(v)-3))
}
colnames(final_dat)=c(antigens,"Benefit")
View(final_dat)
View(final_dat)
for (v in anti_file_names)
{
print(v)
antigens = c(antigens,substr(v,1,length(v)-3))
}
?substr
antigens
for (v in anti_file_names)
{
print(substr(v,1,length(v)-3))
antigens = c(antigens,substr(v,1,length(v)-3))
}
for (v in anti_file_names)
{
print(length(v))
print(substr(v,1,length(v)-3))
antigens = c(antigens,substr(v,1,length(v)-3))
}
?len
for (v in anti_file_names)
{
antigens = c(antigens,substr(v,1,nchar(v)-3))
}
colnames(final_dat)=c(antigens,"Benefit")
for (v in anti_file_names)
{
antigens = c(antigens,substr(v,1,nchar(v)-3))
}
antigens = c()
for (v in anti_file_names)
{
antigens = c(antigens,substr(v,1,nchar(v)-3))
}
antigens = c()
for (v in anti_file_names)
{
antigens = c(antigens,substr(v,1,nchar(v)-4))
}
colnames(final_dat)=c(antigens,"Benefit")
View(final_dat)
View(final_dat)
library("glmnet")
isntall.packages("glmnet")
install.packages("glmnet")
library("glmnet")
model = cv.glmnet(X,Y,nfolds=30)
X=final_dat[,1:59]
Y=final_dat[,60]
model = cv.glmnet(X,Y,nfolds=30)
View(X)
View(X)
X=as.integer(final_dat[,1:59])
View(X)
View(X)
X=as.numeric(final_dat[,1:59])
X=lapply(final_dat[,1:59],as.numeric)
Y=final_dat[,60]
model = cv.glmnet(X,Y,nfolds=30)
?rnorm
X=matrix(lapply(final_dat[,1:59],as.numeric))
Y=matrix(final_dat[,60])
model = cv.glmnet(X,Y,nfolds=30)
X=matrix(lapply(final_dat[,1:59],as.numeric))
X=matrix(final_dat[,1:59])
X=matrix(final_dat[,1:59])
Y=matrix(final_dat[,60])
model = cv.glmnet(X,Y,nfolds=30)
X=final_dat[,1:59]
dat = matrix(final_dat)
X=final_dat[,1:59]
Y=matrix(dat[,60])
X=matrix(final_dat[,1:59])
Y=final_dat[,60]
model = cv.glmnet(X,Y,nfolds=30)
X=data.matrix(final_dat[,1:59])
Y=final_dat[,60]
model = cv.glmnet(X,Y,nfolds=30)
glmnet.plot(model)
plot(model)
get_match_score = function(mutations,gene_exps)
{
#keep track of number of matches
matches = rep(0,length(gene_exps))
i = 1
#go through each antigen in the file
for (anti in gene_exps)
{
total = 0
for (mut in mutations)
{
#compare mut to this specific specific antigen
score = sum(grepl(mut,anti))
}
matches[i]=total
i=i+1
}
return(matches)
}
tumor_samples = read.csv("tumor_data.csv",header = T)
#read in all the antigen expressions
anti_gene_exps = get_anti_exp(anti_file_names)
tetras=colnames(tumor_samples)[3:length(colnames(tumor_samples))]
count_score=function(r)
{
muts = tetras[r==1]
return(get_match_score(muts,anti_gene_exps))
}
results2 = apply(tumor_samples[,-(1:2)], 1, count_score)
lb_scores = as.data.frame(results2[tumor_samples[,2]==1,])
nb_scores = as.data.frame(results2[tumor_samples[,2]==0,])
lb_scores$Benefit=1
nb_scores$Benefit=0
final_dat = rbind(lb_scores,nb_scores)
antigens = c()
for (v in anti_file_names)
{
antigens = c(antigens,substr(v,1,nchar(v)-4))
}
colnames(final_dat)=c(antigens,"Benefit")
View(final_dat)
View(final_dat)
get_match_score = function(mutations,gene_exps)
{
#keep track of number of matches
matches = rep(0,length(gene_exps))
i = 1
#go through each antigen in the file
for (anti in gene_exps)
{
total = 0
for (mut in mutations)
{
#compare mut to this specific specific antigen
score = sum(grepl(mut,anti))
if (score>0)
total = total+score
}
matches[i]=total
i=i+1
}
return(matches)
}
tumor_samples = read.csv("tumor_data.csv",header = T)
#read in all the antigen expressions
anti_gene_exps = get_anti_exp(anti_file_names)
tetras=colnames(tumor_samples)[3:length(colnames(tumor_samples))]
count_score=function(r)
{
muts = tetras[r==1]
return(get_match_score(muts,anti_gene_exps))
}
results2 = apply(tumor_samples[,-(1:2)], 1, count_score)
lb_scores = as.data.frame(results2[tumor_samples[,2]==1,])
nb_scores = as.data.frame(results2[tumor_samples[,2]==0,])
lb_scores$Benefit=1
nb_scores$Benefit=0
final_dat = rbind(lb_scores,nb_scores)
antigens = c()
for (v in anti_file_names)
{
antigens = c(antigens,substr(v,1,nchar(v)-4))
}
colnames(final_dat)=c(antigens,"Benefit")
X=data.matrix(final_dat[,1:59])
Y=final_dat[,60]
model = cv.glmnet(X,Y,nfolds=30)
plot(model)
model$lambda
model$lambda.min
lam = model$lambda.min
model = cv.glmnet(X,Y,family = "binomial",nfolds=30)
plot(model)
model = cv.glmnet(X,Y,family = "binomial",nfolds=5)
plot(model)
lam = model$lambda.min
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
best_mod$classnames
results = predict(best_mod,X)
View(results)
View(results)
installed.packages("rpart")
library(rpart)
fit = rpart(Benefti~.,data =final_dat)
fit = rpart(Benefit~.,data =final_dat)
plot(fit)
plot(fit, uniform=TRUE, main="Classification Tree for Paitents)
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE, main="Classification Tree for Paitents")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
results = predict(fit,final_data[,-60])
results = predict(fit,final_dat[,-60])
results
?predict
results = predict(fit,final_dat[,-60], type = "class")
round(results)
table(Y,round(results))
?roc
installed.packages("pROC")
library(pROC)
library("pROC")
library(pROC)
installed.packages("pROC")
library(pROC)
installed.packages("ROCR")
library(ROCR)
pred <- prediction(results, Y)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
table(Y,round(results))
pred <- prediction(results, Y)
pred
pre = predict(best_mod,X)
table(Y,pre)
pre = predict(best_mod,X,type = "class")
pre
library(rpart)
plot(fit, uniform=TRUE, main="Classification Tree for Paitents")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
pre = predict(fit,X)
pre = predict(fit,as.data.frame(X))
pre
table(Y,round(pre))
table(Y,pre>=.4)
pred <- prediction(pre, Y)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
table(Y,pre>=.3)
table(Y,pre>=.4)
table(Y,pre>=.6)
table(Y,pre>=.7)
table(Y,pre>=.8)
pre
table(Y,pre>=.9)
table(Y,pre>=.8)
table(Y,pre>=.5)
.66+30/32
1.59/2
library("glmnet")
X=data.matrix(final_dat[,1:59])
Y=final_dat[,60]
model = cv.glmnet(X,Y,family = "binomial",nfolds=59)
plot(model)
plot(model$glmnet.fit)
plot(model$glmnet.fit,"lambda")
plot(model)
plot(model$glmnet.fit,"lambda")
plot(model)
plot(model$glmnet.fit,"lambda")
plot(model$glmnet.fit,"lambda")
plot(model)
plot(model)
lam
log(lam)
exp(-4)
lam = exp(-4)
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
pre = predict(best_mod,X,type = "class")
pre_1 = predict(best_mod,X,type = "class")
pre_1
table(Y,pre_1)
?predict
pre_1 = predict(best_mod,X,type = "response")
pre_1
pred <- prediction(pre_1, Y)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
plot(model$glmnet.fit,"lambda")
plot(model)
lam = exp(-3.5)
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
pre_1 = predict(best_mod,X,type = "class")
table(Y,pre_1)
pre_1 = predict(best_mod,X,type = "response")
pre_1 = predict(best_mod,X,type = "response")
pred <- prediction(pre_1, Y)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
lam = exp(-3)
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
pre_1 = predict(best_mod,X,type = "response")
table(Y,pre_1)
table(Y,round(pre_1))
library(pROC)
pred <- prediction(pre_1, Y)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
lam = exp(-4)
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
pre_1 = predict(best_mod,X,type = "response")
pred <- prediction(pre_1, Y)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
pred <- prediction(pre, Y)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
pre = predict(fit,as.data.frame(X))
table(Y,pre>=.5)
pred <- prediction(pre, Y)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
fit = rpart(Benefit~.,data=final_dat,method="class")
plot(fit, uniform=TRUE, main="Classification Tree for Paitents")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
pre = predict(fit,as.data.frame(X))
table(Y,pre>=.5)
table(Y,pre>=.5)
pre = predict(fit,as.data.frame(X))
pre
table(Y,pre[,2]>=.5)
printcp(fit)
plotcp(fit)
pfit<- prune(fit, cp=   fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
plot(pfit)
library(randomForest)
install.packages("randomForest")
library(randomForest)
fit = randomForest(Benefit~.,data=final_dat)
final_dat
fit = randomForest(Benefit~.,data=final_dat)
fit = randomForest(Benefit~.,data=as.data.frame(final_dat))
fit = randomForest(Benefit~.,data=final_dat)
fit = randomForest(Benefit~.,data=as.dataframe(final_dat))
fit = randomForest(Benefit~.,data=as.data.frame(final_dat))
final_dat_2 = as.data.frame(final_dat)
fit = randomForest(Benefit~.,data=final_dat_2)
View(final_dat_2)
setwd("/Users/richardwen/Desktop/informatics")
#read in all the tumor file names
inf_anti_files=file("inf_anti_files.txt",open="r")
anti_file_names=readLines(inf_anti_files)
close(inf_anti_files)
get_anti_exp = function(anti_files)
{
anti_exp = list()
i = 0
for (f_name in anti_files)
{
i=i+1
inf_anti = as.data.frame(read.csv(paste("inf_anti_data/",f_name,sep=""),header = TRUE))
colnames(inf_anti)=unlist(inf_anti[1,])
inf_anti = inf_anti[-1,]
anti_exp[i] = list(inf_anti$Description)
}
return (anti_exp)
}
get_match_score = function(mutations,gene_exps)
{
#keep track of number of matches
matches = rep(0,length(gene_exps))
i = 1
#go through each antigen in the file
for (anti in gene_exps)
{
total = 0
for (mut in mutations)
{
#compare mut to this specific specific antigen
score = sum(grepl(mut,anti))
if (score>0)
total = total+score
}
matches[i]=total
i=i+1
}
return(matches)
}
#read in tumor data
tumor_samples = read.csv("tumor_data.csv",header = T)
#read in all the antigen expressions
anti_gene_exps = get_anti_exp(anti_file_names)
tetras=colnames(tumor_samples)[3:length(colnames(tumor_samples))]
count_score=function(r)
{
muts = tetras[r==1]
return(get_match_score(muts,anti_gene_exps))
}
results = apply(tumor_samples[,-(1:2)], 1, count_score)
results2 = apply(tumor_samples[,-(1:2)], 1, count_score)
lb_scores = as.data.frame(results2[tumor_samples[,2]==1,])
nb_scores = as.data.frame(results2[tumor_samples[,2]==0,])
lb_scores$Benefit=1
nb_scores$Benefit=0
final_dat = rbind(lb_scores,nb_scores)
antigens = c()
for (v in anti_file_names)
{
antigens = c(antigens,substr(v,1,nchar(v)-4))
}
colnames(final_dat)=c(antigens,"Benefit")
library(rpart)
fit = rpart(Benefit~.,data=final_dat,method="class")
plot(fit, uniform=TRUE, main="Classification Tree for Paitents")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
pre = predict(fit,as.data.frame(X))
table(Y,pre[,2]>=.5)
X=data.matrix(final_dat[,1:59])
Y=final_dat[,60]
pre = predict(fit,as.data.frame(X))
table(Y,pre[,2]>=.5)
library(randomForest)
fit = randomForest(Benefit~.,data=final_dat_2)
fit = randomForest(Benefit~.,data=final_dat)
?randomForest
final_dat$Benefit = as.factor(dat$Benefit)
final_dat$Benefit = as.factor(final_dat$Benefit)
fit = randomForest(Benefit~.,data=final_dat)
print(fit)
importance(fit)
library("glmnet")
X=data.matrix(final_dat[,1:59])
Y=final_dat[,60]
model = cv.glmnet(X,Y,family = "binomial",nfolds=59)
plot(model)
plot(model$glmnet.fit,"lambda")
lam = exp(-4)
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
lam = exp(-8)
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
plot(model)
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
summary(best_mod)
best_mod$beta
lam = exp(-4)
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
best_mod$beta
lam = exp(-3)
best_mod = glmnet(X,Y,family ="binomial",lambda = lam)
best_mod$beta
best_mod$beta[is.numeric(best_mod$beta)]
coef(model)
coef(best_model)
coef(best_mod)
